struct VS_IN
{
	float3 p : POSITION; 
	float3 n : NORMAL;
    	float4 c : COLOR;
	float2 t : TEXTURE;
};
struct VS_OUT
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;

	float4 lightcolor : TEXCOORD1;
	float4 vWorld : TEXCOORD2;
	float3 vLight : TEXCOORD3;
};

// 상수버퍼는 레지스터 단위로만 저장된다.
// 레지스터 단위란 :  float4(x,y,z,w)
cbuffer cb_data : register(b0)
{
	matrix g_matWorld : packoffset(c0);
	matrix g_matView : packoffset(c4);
	matrix g_matProj : packoffset(c8);
	float4  vTimer : packoffset(c12);
};
VS_OUT VS(VS_IN input) 
{
	VS_OUT output = (VS_OUT)0;
	float4 vLocal = float4(input.p,1.0f);
	// 중요:  mul 함수는 내적으로 처리된다.
	// vWolrd.x = vLocal dot c0; // 행*행
	// vWolrd.y = vLocal dot c1;
	// vWolrd.z = vLocal dot c2;
	// vWolrd.w = vLocal dot c3;	
	// matrix matTranspose = transpose(g_matWorld);
	float4 vWorld = mul(vLocal, g_matWorld);
	float4 vView = mul(vWorld, g_matView);
	float4 vProj = mul(vView, g_matProj);	
	output.p = vProj;
	output.n = input.n;
	output.c = input.c;
	output.t = input.t;
	
	output.vWorld = vWorld;
	//light
	float3 vLight = vTimer.xyz;//float3(0,-1,0);
	output.vLight = vLight;
	float fDot = max(0.3f, dot(input.n, -vLight));
	output.lightcolor = float4(fDot,fDot,fDot,1);

	return output;
}

Texture2D    g_txTex		: register(t0);
SamplerState g_SampleWrap		: register(s0);

float4 PS(VS_OUT input) : SV_Target
{
	float4 vColor = g_txTex.Sample(g_SampleWrap , input.t);
	if( vColor.a <= 0.0) { discard; }
	return vColor*input.c; 
}