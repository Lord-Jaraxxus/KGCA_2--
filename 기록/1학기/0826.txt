2:15 ~ 2:20  // 2:35 // 3:15 <-딴짓하다가 놓친시간근처

킹늘은 DirectX SDK(개발자 키트) 를? 볼것
1부터 좀 보고 DirectX를 좀 볼것이다
DirectX가 11이던 12던 뭐 크게 중요한게 아니라 게임을 만들어내는데 필요한 알고리즘들이 더 중요하다
엔진갖고 게임을 만들면 게임 내부적인 알고리즘들을 거의 다뤄볼 일이 없을것, 그러니까 DirectX로 그런것들을 해보면 개념적인 이해가 높아지고 아무튼좋을것이다
왜 그런걸 하는지가 중요, 어떻게 사용하는지는 크게 중요치 않다. 근데 사용을 못하면 화면에 뿌리질 못함ㅎ


COM : 마소가 소프트웨어 만드는 툴?같은건가.. 소프트웨어 개발 플랫폼
이걸 쓰려면 반드시 최상위 클래스는 IUnknown이어야 한다, 쿼리? 
DirectX도 이걸로 만들어졌으니까 적용되는듯
직접 명령내리고 직접 뭐 할 수 있다, 특히 그래픽카드


다이렉트X는 뉴라는게 없다? 획득??


#include <d3d11.h> : 다이렉트X 11 사용하기 위한 헤더
설정->링커->입력->추가종속성->d3d11.lib 이렇게 넣는 방식도 있고 코딩으로 넣는건
#pragma comment(lib, "d3d11.lib) 이거임, 이쪽이 훨씬 편할듯
#pragma comment(lib, "dxgi.lib) 얘도 무조건 해줘야한다고하네요
 
인터페이스 -> 하드웨어 직접 제어 -> 획득
디바이스? 디바이스콘텍스트? 
ID3D11Device* m_pd3dDevice;
ID3D11DeviceContext* 

D3D11CreateDevice
HRESULT : 모든 다이렉트x의 반환값?


D3D_DRIVER_TYPE : 하드웨어 가속, 글카가 구리면 워프나 소프트웨어 해야하지만 보통은 하드웨어 쓰면된다
HMODULE : 다른거 모듈 쓸래? 이런뜻, 그냥 NULL
플래그는 그냥 0 해둠
D3D_FEATURE_LEVEL : 원래 포인터가 들어가야 하는데 일단 그냥 1로 해둠
SDKVersion : 묻지도 따지지도 말고 무조건 최신버전 (D3D11_SDK_VERSION)
뒤에 세개가 리턴됨 (참조& 를 통해서)
IDXGIAdapter : 얘가 그래픽 카드임 ㄷㄷ null이면 현재 쓰고있는 놈을 쓰겠다는뜻


S_OK 뜨면 정상적으로 됐다는뜻
FAILED 매크로를 반드시 쓸 것. 리턴값 0도 성공임, 그러니까 SUCEEDED FAILED 이 매크로로 성공/실패를 판별하라

IDXGIFactory
IDXGISwapChain
CreateDXGIFactory, __uuidof, (void**).... 이게 다 뭐시당가 ㅅㅂ
후면버퍼... 전면버퍼.. 돌겠네 진짜
-더블 버퍼링 : 스크린 화면이 전면 버퍼, 렌더링 대상이 후면 버퍼, 다 뿌렸으면 교체를 한다. 이런 방식으로 하면 화면 깜빡임을 없앨 수 있음

샘플링 : 크레파스로 칠하고 칠하고 존나칠하면 진해짐(퀄리티는 올라감), 근데 속도는 느려짐
샘플링 퀄리티 = 칠한 횟수

CreateRenderTargetView : 렌더 타겟 지정
DX에선 복사하면 새로 생성이 되기 때문에 릴리즈를 반드시 해줘야한다?
OMSetRenderTarget : 렌더타겟에 실시간? 렌더링? 하는?듯?


1) 디바이스 생성 
2) 팩토리 생성
3) 스왑체인 생성
4) 랜더타겟뷰 생성
5) 뷰포트 생성
1,2번은 서순 상관없음

디바이스 : 다른 인터페이스 생성시 사용한다
이미디어트콘텍스트 : 생성된 인터페이스를 사용(관리, 제어)할 때

스왑체인->프리젠트를 해야 매 프레임 바꾼다..

저것도 윈도우 띄운거랑 거의 비슷하다, 거의 안바뀔예정
그러므로 디바이스 클래스를 하나 만들어서 

exturn....? 아이고오오오오
핸들이랑 클라이언트를 전역변수로 놓고 exturn으로 여기저기서 쓰려?는듯? 저거 두개는 자주 바뀌?니까?

윈도우랑 디바이스는 뭐 누가 누굴 상속하던 포함하던 괜찮다, 엎어치나 메치나


뷰포트가 무엇이느느느냐 -> 백버퍼에서 보여줄 영역만 뷰포트로 지정할 수 있다.
ex) 백버퍼에 사람 세명인데 그중 제일 왼쪽만 뷰포트에 담음 