9/27(화) - 오늘만 지나면 당분간 수업 없당

오늘은 무엇을 할것이느느냐
UI 쪼끔 추가작업 하고? 

컴포지트 패턴 복습 잠깐
컴포지트 패턴이랑 프로토타입 패턴은 같이 다닌다, 근데 지금 우리는 걍 컴포지트만쓰는중
다이얼로그에 사용한 것이 컴포지트 패턴 

아무튼 그 차일드리스트를 인터페이스로 아예 올려버렸다
그러므로 모든 인터페이스에는 컴포지트가 적용된다고 할수있겠다
다이얼로그 9등분할때 썼던 SetDrawList? 암튼 이것도 이제 인터페이스로 올라감
다이얼로그 SetRect 없애뿌고 등등 자잘한 수정도 들어가고.. 어우 어둑어둑하니 눈아팡

어.. 스프라이트매니저랑 사운드매니저도 등장?

이벤트라는 구조체로 이거저거 묶어서 작업하는게 우리한텐 훨씬 편할 것이다..

2D게임 만들기 전에 아직 안다룬거
1. 상태전환 
2. 패스파인딩? 아마 인공지능
3. 충돌
이것들은 뭐 일단 만들고 나서 할 거신디

아무튼 이제 무엇을 넣을 때가 되었느냐
스마트 포인터! 3개월차는 쓸수있음 엌ㅋㅋ
앞으로 new 할 자리에 스마트 포인터를 쓰것다

std::shared_ptr<T(뭐 클래스던 구조체던)> // 가장 대표적인? 스마트포인터
** 쟤도 결국엔 템플릿 클래스에 불과하다 (객체에 불과하다) ** // 이걸 꼭 인지할 것
참조 카운트가 0가 되는 순간에 자동 해제(delete)를 해준다
즉 new를 하고 나서 delete를 해줄 필요가 없다, 편하다
.get()으로 접근하면 포인터에 접근할수가 있따

std::make_shared<T>(); // new 대신 이걸 쓰는것이 좋다

shared_ptr의 복사 생성자? 대입 연산자? 이게 그 뭐시기냐 참조로 되어있다


근데 객체가 소멸하기 전에 Release 명시적으로 해줘야댐
그래서 일반적으로 해제자에 Release 넣어주는게 좋긴 하다 (일단은 정리가 되긴 한다.. 고려할게 뭐가 더 있남?)


이번에는 unique_ptr로 한번 가볼거시다
유니크ptr은 참조 카운팅이 안된다! 
참조, 대입이 안 된다 = 남한테 넘길 수 없다
매니저에서는 유니크ptr이면 됨 (매니저의 포인터를 다른데에서 함부로 건들 수 없게)
근데 유니크도 get으로 가져올순있따,
그리고 get으로 가져온 포인터는 얼마든지 delete할 수 있다 (근데 그러면 야랄난다)
그러므로 사용할 때 주의해야 하는 건 여전하다, 그냥 좀 쓰기 편해졌을 뿐 딱히 안전해진건 아니다
->가 사실 연산자 재정의가 되어있다? (.get()-> 인듯)

최상위 클래스? 에서 bool IsNullAble 뭐 이런걸로 널체크 가능하도록 하고 생성자에서 초기화해주면 
필수는 아닌데 나중에 보탬이 될 것..

매니저를 조금 다듬을 것, 아니 근데 저걸(스프라이트 객체) 유니크로 만드는 거 맞아여? 매니저 자체가 유니크여야하는게? 않인가? 않임말고
move..?? 어... 모르겠다... 그냥 대충 흘려듣는 게 나을지도
소유권 이전? ㅋㅋ;


위에껀 C++의 스마트 포인터고, DirectX에도 비슷한 게 있다
컴포넌트 라이브러리에 해당하는 스마트포인터 역할을 하는 게 따로 있다 (릴리즈 안해도 되는것)
대충 ComPtr 이러케 생겼는데..
음.. 그냥 듣기만 하자..

