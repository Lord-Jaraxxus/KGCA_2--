10/11 - 수업 개오랜만이네.. 6614 ㅅㅂ 이번엔 7분에 온다해놓고 15분에오고자빠지고자빠졌네

오늘의 수업내용 - 리사이즈, 타이머 + 벡터! (내적, 외적)

벡터쪽은 중요해보여서 다른 텍스트파일로 따로 빼놨음
내적 - 내적으로 얻을 수 있는 것 (사잇값, 차잇값?, ★투영★), 걔들을 어따 쓸 수 있는지



앞으로 수업에서 코딩을 안해주실 것.. 
그러므로 옛날 코드를 보면서 파악해야 할것이다

TBasis3D 쭉 흝으면서 뭐 했었는지, 앞으로 뭐할건지 대충 봤구요

리사이즈 <- 얘는 필수로 해줘야만 한다

리사이즈, 벡터, 행렬, 임의의 축의 회전, 사원수? 
벡터 이후로는 산수시간이 될것이다.. 옘병..





암튼 리사이즈부터 시작할 것. 

1. 윈도우 크기 변경 메시지 검출
2. 현재 설정된 렌더타겟(+깊이 스텐실 버퍼)의 해제 및 소멸
3. 변경된 윈도우의 크기를 얻고 백 버퍼의 크기를 재조정
4. 변경된 백버퍼의 크기를 얻고 렌더타겟 뷰를 다시 생성 및 적용
5. 깊이 스텐실 버퍼 (지금은 없으니까 할필요x)
6. 뷰포트 재지정

렌더타겟과 관련있는 것들.. Write? 아무튼 렌더타겟에 연결되어 있는 것들은 다 삭제해야한다?

창 크기가 바뀌면 (생성시에도) WM_SIZE 메시지가 호출된다 
ResizeDevice 함수를 직접 만들어서 Window 클래스에 추가해야 하는듯, 디바이스가 상속받고 있으니까 디바이스까지 갈수있을것 (디바이스를 상속하는 놈들까지도)
어.. 몬가왤케많음; 책 봐야하나 책 봐야할듯;

디바이스 종속적? -> 삭제와 생성이 따라간다 // ex) Write의 2D렌더타겟, 3D렌더타겟과 연동됨
디바이스 독립적  -> ex) Write의 뭐시기팩토리들 

m_pRTV.Reset(); <- 근데 이건 컴포넌트? 아무튼 그거일때만 되는거 아닌가? 난 그거 안해놨는데;

렌더타겟을 풀어주고(OMSetRenderTargets을 0,nullptr,NULL 로 해주고) 삭제해야 안전하다

m_pSwapChain->ResizeBuffers


디바이스 클래스에 CreateDXResource, DeleteDXResource 이런 함수들이 필요할 것 (상속한 코어까지 가서 Write를 지워야하니까)

그 뷰포트 크기 재설정도 해주고....

지웠던 Write를 이제 CreateDXResource로 다시 맹글어주고 ㅇㅇ

Write 안에서도 위에 두개를 오버라이드 해서 렌더타겟에 종속적인 놈들만 지워삐고 만들고 하믄댄다

g_rtClient <- 얘를 갱신해줘야 할것? 근데 아까 해준거아님? 웨않된대?
아 저건 갱신이 됬는데 저걸 사용해서 생성된 새끼들이 갱신이 안된거구나

어.. 아는거라고생각해서딴짓했는데사실중요한내용이었던거아닌가(이미지해상도갱신쪽얘긴데...)
위치를 비율적으로 조정을 해야지 고정을 해놓으면 안된다, 맞말인듯 ㅇㅇ;




타이머.. 도 한번 가서 봅시다
근데 지금 앵간 괜찮게 해놓은거 아님? 역시 
쌤피셜) 굳이 안바꿔도 괜차나여, 근데 있으니까 여까지만 쪼꼼 바꿔쳐볼게여

라지_인티저로 m_Frequency(주파수), m_Frame(프레임?)
(라지라지? 엌ㅋㅋ)
QueryPerformanceFrequency(&m_Frequency) // 주파수? 어디서 호출하던 절대로 바뀌지 않는다(불변)
QueryPerformanceCounter(&m_Frame) // ??

QueryPerformanceCounter(&m_Current);
m_fElapseTimer = ()
아몰르겠다 아무튼 그 뭐시기냐 선생님코드에있음ㅅㄱ;;;
TimeGetTime을 PerformanceCounter로만 바꿨다

라지 인티저가 어떤새기인지만 알고 넘어가면 된다, 
쿼드파트 = 본체, 하이파트/로우파트로 프/렌다 되어있는걸 합친것
로우파트만 써도 49억까지 쓸 수 있으니까 뭐




DirectWrite / Font - 여긴앵간끝났던게?
아 그냥 사실 여기에 기능이 앵간 많다 라는 이야기
버튼 중에서 가장 구현하기 어려운 기능이 에디터.. 인데 저 DirectWrite를 쓰면 개쉽게 만들수있다




CPU 접근? Map하고 Unmap..
Map : GPU의 시작메모리를 리턴해줌, Unmap을 하기 전까지는 대기상태가 되어서 그 어떤놈도 이 메모리에 접근을 못한다
업데이트서브리소스로 한번에 바꿔치는게 아니라, 메모리에 다이렉트로 접근해서 바꿀 수 있다
즉, 정점이 오천만개라면 오천만개 업데이트 하는게 아니라 필요한 것만 바꿀 수 있다는 장점이 있다

DISCARD랑 NO_OVERWRITE 이거 두개를 어떻게 쓰느느냐에 따라서 그 뭐시기 암튼 달라진다
DISCARD : 버퍼 다 바꿀거니까 기존 데이터 다 폐기처분해라
NO_OVERWRITE : 덮어쓰기 안하겠다, 버텍스/인덱스 버퍼에서만 가능. 
버퍼가 3천개라면 1프레임은 1~3000, 2프레임은 3001~6000, 뭐 이런식으로 쓰다가 
많아지면 DISCARD로 한번 싹 버려주고 다시 처음부터 NO_OVERWRITE로 써내려가고 이런식이 제일 빠르다 (ㄹㅇ?)

읽기 전용과 쓰기 전용은 하늘과 땅 차이, 읽기는 거의 지원을 안한다고 생각하면 된다 (GPU입장에서 읽기는 상당한 부하가 걸리기 때문)
