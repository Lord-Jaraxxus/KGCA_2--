10/17(월) - 주말 너무 짧다.. 알바 대타 두번다시는 안간다 진짜


Q : 아니 시발 그래서 우리 지금 3개짜리 벡터 쓰고있잖아 w값은 어디서 튀어나와서 어디로 가고 어? 아무튼 뭐가 어떻게 돌아가는거야
A : 아 w는 항상 1.0 유지하네? 아 저거 정점에 원근투영 행렬 곱하면 w값이 z값이 되는구나! 그래서 w값으로 나눠서 정규화 해줘야하는거구나, w값이 z값이라는 얘기도 이 얘기였어 
직교투영행렬은 곱해도 1이라 굳이 w값으로 안나눠도 괜찮고 (p344 참고)




오늘은 투영변환

투영변환은 최종적으로 NDC 좌표계로 바꿔주는 것 까지 해준다
투영변환은 크게 두가지가 있는데, 1.직교투영 2.원근투영
투영 평면 (근단면) -> 최종적으로 화면에 나오는거

핵심은 뭐냐 -> 직교투영과 원근투영 행렬을 만들어 낼 수 있으면 된다

뷰 좌표계에서 스크린 좌표로 다이렉트로 변환도 가능, 근데 저거 뭐시기ratio 왜 곱해주는지는 잘 이해가 안가는데 몰라 뭐 딱히 몰라도 상관없것지


직교 투영 -> z값에 대한 공식이 중요하다
카메라 위치에서부터 근단면의 거리 -> 보통 0.1f 혹은 1.0f 값을 주로 사용한다
카메라 위치에서부터 원단면의 거리 -> 보고 싶은 최대 거리를 지정하면 된다
아무튼 행렬에 집어넣으면 저러케 된다 (수식 33-3, 몇페이지냐)

OffCenter -> 뷰 좌표의 일부 영역만 투영하겠다 (할때 쓰는 함수?)


원근 투영 
원리 -> 닮은꼴삼각형 (그림 33-3), 대충 알것같기도하고
하나는 fov값이 있는 놈, 하나는 없는놈
원근투영은 저 _34(1)이랑 _44(0) -> 요게 중요하다 = 원근투영은 절대로 단위행렬로부터 출발하면 안된다, 그래서 제로메모리 해놓고 씀
원근투영 행렬은 반드시 마지막에 w값으로 나눠야한다, w값은 z값..? ---
z값 계산을,, 니어->0 파->1 되어야하는걸 이용해서 구한다 (수식 33-5, 33-6)
근데 계산 후에 z값은 의미없지않음? -> 아 그 근단면/원단면 밖으로 나가면 그리면 안되니까 의미있긴하네
fov값을 갖고 사용을하면 가로/세로가 의미가없다,, 
z값이 맨 마지막에 정규화될때 계산이 된다 -> 이거 하나는 기억을 해야한다

원래 쉐이더에 넘겨줄때 마지막거를 w값으로 넘겨주면 금마가 알아서 정규화해주는데, 우리는 그냥 1.0 박아놨으니까 w값으로 나눠서 직접 정규화 해줘야한다

돌겠네... 못쫓아가겄어,,, 	// 휴 다행이다 나만 그런게 아니었어



기본수학이 한참남았다구요? 안돼
아무튼 수학만 한참하면 너무 단조로우니까 3D 오브젝트를 만들러간다	// 단조로운게아니라대가리가가라앉을것같아여

대부분의 계산을 죄다 쉐이더에서 하게끔 바꿀것이다




- 코딩파트

원근 가기 전에 일단 직교투영 코딩부터? 
OrthoLH (그냥 직교투영) 인자값 -> 가로, 세로, NearDistance, FarDistance
OrthOffCenterLH (직교투영인데 뷰 좌표계의 일부 영역만 투영)-> 매개변수가 위에랑 좀 다른데..? (l, r 인데 뭐하는놈들이더라)

지금 있는 Matrix클래스 함수들은 다 값을 반환하는거라서 void로 지를 바꾸는 함수도 만들어줌, 원래있던놈들한테는 static 붙여줌
근데 왜 static쓰시는거지 뭤땜이더라,, 저거 사실 멤버함수가 아닌 취급이던가 했던 것 가틍ㄴ데
아ㅓ레? 이젠 프렌드가 되뿟네? 아닌가? 네임스페이스? 머임? 바깥에서 네임스페이스 만들어서 스태틱으로 쓰는게 훨씬 유리하다.. -> 왜죠? ;;
어우 씨 모르겠다 난 그냥 이름바꿔서 멤버함수로 쓸란다,, 
근데 그 지 스스로 바꾸는거는 맨앞에 Identity 해줘야 행렬을 재활용 가능 -> 근데 누적하고 싶으면? 

아무튼 기본적인 OrthoLH 맹글었고 
이제 OrthOffCenterLH (x시작위치,너비, y시작위치,높이, ND, FD) 인듯? 암튼 됐고,,


원근투영, 
원래 1x4(마지막은 w값, xyz값을 나눠서 정규화 시켜주는놈) 여야 한다, 4x4에 곱하게
원래 쉐이더에 넘겨줄때 마지막거를 w값으로 넘겨주면 금마가 알아서 정규화해주는데, 우리는 그냥 1.0 박아놨으니까 w값으로 나눠서 직접 정규화 해줘야한다

몬가.. 몬가 코드는 간단한 것 같은디... 몬가몬가임..



이제 3D 오브젝트를 만들러간다, 베이스오브젝트 상속받아서 Object3D 만들고
Shape는 머지? 정사면체같은건가? 아니 근데 사각형도 오브젝트에서 만들었는데 굳이 Object3D가 아니라 여기서 할 이유가 있나

암튼 ShapeBox 서 베이스오브젝트의 CreateVertexData랑 CreateIndexData 갖고와서 오버라이드 해주고

텍스처 안붙이고 정육면체 만들때는 정점 8개면 된다, 근데 텍스처 붙일거면 24개 필요함 (면마다 4개 x 6)
어.. 인덱스리스트에 36개.. 각 면을 바라보는 기준으로 시계방향으로 

렌더도 갖고와서 오버라이드? 맞나? 암튼 렌더도 고쳐줌
프레임도 예전에 그 BG 돌릴때 쓰던거 그대로 갖고와서 좌표계 변환 할 수 있도록

아무튼 이제 잘 뵈는데 텍스처 좌표가 이상하다, 그래서 버텍스버퍼가 24개가 있어야한다
짜증나니까 예전에 하셨던거 붙일거임.. 근데 그것도 쉽진 않네요 ㅋㅋ


앞으로 응용프로그램에서 하지 않겠다, 베이스오브젝트에 버퍼를 하나 더 만들겠다
상수 버퍼라는 것을 하나 이용을 해서 쉐이더에서 뭐시기저시기

오후에도해야되겠따? ㅇ미놀미ㅏ다ㅣㅇ머안ㅇㄴ안돼요싫어요이러지마세요

상수버퍼에서 정점 쉐이더에다가 행렬 세개 (월드, 뷰, 투영)를 넘길거다
매 프레임마다 업데이트가 되어야 하는것에 신경을 좀 쓰면 됩니다

CreateConstantData, CreateConstantBuffer..
BindFlags만 상수버퍼로 바꿔준다

UpdateConstantBuffer도 너주고

Create에서 CreateContextBuffer도 추가

프리렌더에서 콘텍스트->VSSetConstantBuffer (버텍스 쉐이더, 즉 VS한테 넘어가야 하기 때문에 IASet이 아님)

버텍스 쉐이더에서 받을 준비가 안되어있음,

쉐이더중에 DefaultShpae를 DefaultObject로 이름 바꿔주고 아무튼 저거 가져오고 뚜껑따서 상수버퍼 느줌

상수버퍼는 cbuffer 
// 상수버퍼는 레지스터 단위로만 저장된다. 레지스터 단위란? : float4(x, y, z, w)
cbuffer cb_data(상수버퍼이름, 암거나 맘대로) : register(b0)
{
	matrix g_matWorld : packoffset (c0) // 상수 레지스터 c0부터 저장이 된다, 안붙여도 되긴하는데 명시적으로 볼수있어서 좋다
	matrix g_matView : packoffset (c4)
	matrix g_matProj : packoffset (c8)
}; 

그,, 예시로 저거 타이머를 상수버퍼에 추가하셨는디,, 귀찮응꼐 나는 안할려,,

상수버퍼 저거는 쉐이더에서는 전역변수랑 같다고 생각하믄 댄다, 그래서 저거 g_matWorld 그대로 갖고써도댐
그리고 저거 VS_OUT에서 vLocal부터 vProj까지 작업해준다

일케 해주면 응용프로그램이 아니라 쉐이더에서 곱해준다!


근데. 근데.. 근데!
중요 - mul 함수는 내적으로 처리된다.
내적.. 내적? 

vWolrd.x = vLocal dot c0 // 행*행이 되어뿐다

그래서 전치를 해줘야한다. 
근데 쉐이더 안에서 일일히 전치해주는건 오히려 낭비다 (정점마다 계속 세번씩 전치할테니까?)
그래서 UpdateConsantBuffer에서 저거 세개 행렬을 전치해주고 쉐이더로 넘겨줄것이다

암튼 글케 해놓으면 우리가 수작업으로 (for문 파트) 돌면서 버퍼에 곱해줄 필요가 없다
m_cbData.matWorld = c; 머 이런식으로 해놓으면 댐
그리고 밑에서 UpdataVertexBuffer 이게 아니라 
UpdateConstantBuffer를 해주면 댄다

어... 베이스오브젝트 자체가 세 개의 행렬값을 따로 갖고있고
저거를 업데이트콘스탄트버퍼를 할때 전치를 해서 넘겨준다느낌

베이스오브젝트에 SetMatrix 함수를 만들어서 이용할수 있게끔
프레임에서 호출하면 안된다 (프레임 후에 뭐가 어케 바뀔지 모르니께), 렌더 직전에 호출
오브젝트의 렌더 안에서도 하면 안됨(나중에 피곤해짐), 씬의 렌더에서 오브젝트->프레임 윗줄에 오브젝트->SetMatrix해준다

객체는 월드만 담당하면 된다,,

예?
카메라를?
넣는다구요?

카메라가 실제 작업을 담당하고 있으면 된다 (뷰 행렬, 투영 행렬)
카메라도 렌더링을 할거야->???? 
지금은 아니지만 카메라도 렌더링 데이터로 활용을 할거야, -> 그러니가 베이스오브젝트 상속

어떤 오브젝트던 렌더 직전에 셋매트릭스를 해준다

그,, 카메라에서 투영행렬 파트를 함수로 따로 빼줌 
그리고 그거는 씬의 인잇에서 뉴 카메라 한 다음에 해줘서 한번만 만들도록 (바뀌는건 뷰행렬이고 투영행렬은 거의 고정이기 때문)
근데 그전에 크리에이트 뷰 매트릭스.. 아 돌겠네 

뉴 카메라
카메라->크리에이트 뷰 매트릭스
카메라->크리에이트 프로젝션 매트릭스 
이런 서순으로

이거저거하셨는데 ㅅㅂ그냥 카메라클래스 통으로가져와