10/24 (월)

디버그카메라 코드 잠시 다시 보고 (사실 결국에는 세 개의 함수만 사용을 해도 된다)

카메라 프로스텀을 제작을 하고 그 카메라 프로스텀에 대한 컬링을 해야 한다
보이는 장면만 뿌릴 수 있도록

프로스텀.. 코딩부터 하시네?

프로스텀은 사실 육면체 (근단면, 원단면, 위 아래)
평면 방정식?

8개의 정점을 만들고 그걸 갖고서 평면 6개를 만든다
근데 윗줄에 저걸 만들기 위해서는 카메라의 뷰 행렬과 투영 행렬이 필요할 것

저거 프로스텀(1,1,0 ~ -1,-1,-1 저놈들) 에다가 투영행렬의 역행렬과 뷰행렬의 역행렬을 곱해서 월드로 만들어놓고 뿌리자?
투영행렬까지 곱해진 결과에 생성된 육면체(1,1,0 ~~)가 프로스텀이니까?

평면을 만들어내는 방법은 두 가지
1. 정점 세 개로
2. 하나의 노말(벡터?)과 정점 하나

어.. abcd는 죄다 그냥 평면의 방정식에 금마들인가.. 
프로스텀은 안으로 향하게 하는게 기본, 사실 바깥으로 향해도 아무 문제가 없다(ㄹㅇ?)
 -> 아 이따가 평면 방정식에 넣었을 때 양수/음수 나온거랑 평면이 향하는 방향이랑 그거 거시기 뭐시기니께

프로스텀으로 뭘 할 수 있느느냐 -> 프로스텀에 특정 정점이 포함되는지 여부를 테스트
점을 테스트했다 -> 구도 테스트할 수 있다

바운딩 박스? AABB, OBB(기울어진 놈) <- OBB 요게 중요하다

AABB는 min과 max 두 점만 있으면 만들 수 있다 (기저축이 월드랑 똑같다? 아무튼 틀어지지 않았다)
OBB는 박스의 축(디렉션?), 센터, 센터로부터의 길이 총 3,1,3 해서 7개의 데이터가 있어야 한다

저 위에 것들 + 꼭지점8개까지 죄다 가진 구조체를 하나 만들어서 쓸 것 (귀찮으니까?)
근데 그냥 꼭지점만 가져와서 싹다 돌리면 안되는? 8x6해도 48인디.. 

프로스텀과 OBB의 교차여부 판단 -> 요게 핵심

OBB의 xyz 세개 벡터를 평면의 노말벡터와 내적해서 더하면 OBB의 센터로부터 평면과 가장 가까운 점과의.. 평행거리? 아시발 암튼 그게 구해짐
암튼 그 거리가 OBB의 센터와 평면 사이의 거리보다 길면 프로스텀 안에 있는게 아님

지형에 배치된 모든 오브젝트는 AABB나 OBB나 그런게 있어야 프로스텀에 대입해서 컬링을 하던말던 할수있다
그래서 OBB를 계산해야하는데, OBB 축 계산하는게 위에서 한것보다 더 힘들다 


그리고 바운딩 박스 만드는 얘기에 들어왓읍니다,
AABB는 만드는거 자체는 쉬운데 계산이 뒤지게 많다(오브젝트의 모든 정점을 돌면서 최대,최솟값을 알아내야 하니께)
OBB는 만드는 것도 어렵다
OBB 만들려면 일단 모든 정점 벡터들의 평균? 아무튼 뭐시기 해가지고 센터를 먼저 구하고
그 뭐시기 벡터 내적한거 더하고 뭐시기저시기 하면서 축 두개 만들고 나머지하나는 외적으로... 

아무튼 그걸 인게임에서 실시간으로 계산하면 계산할게 너무 많아서 야랄
그래서 캐릭터 움직임마다 바운딩박스를 미리 계산해놓고 그걸 저장해놔서 쓴다, 툴에서? 암튼 그래한다
그리고 캐릭터가 움직이면(srt죄다) 미리 갖고있는 바운딩박스도 움직이고 하는 식으로(똑같은 srt곱해서)



앞으로 모든 렌더링은 화면(백버퍼)에 안한다, 화면과 똑같은 크기의 텍스처를 만들어서 거기에 뿌린다
백버퍼에는 삼각형 두개만 붙이고 윗줄에서 만든 텍스처를 붙일것
이래놓으면 텍스처를 백버퍼에 뿌리기 전에 후처리가 가능하다 (뽀샵질)


맵에 프로스텀을 적용해볼 건데, 사실 공간분할이 무조건 들어가야 한다
근데 일단 무식하게 해볼거임, 인덱스 버퍼 내용을 바꿀꺼

그.. 베이스오브젝트에서 또 이거저거 바뀌고... 음...
머선일이벌어지는지는잘몰루겠지만아무튼 맵에 프로스텀을 적용중이라는건알겠군