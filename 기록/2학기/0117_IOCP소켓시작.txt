1/17(화) - 


교재부터 좀 보자, 73페이지, 쓰레드 동기화
음~ 12일에 했던 파트였구먼

비동기 -> 쓰레드처럼 돌아가는 건데 쓰레드는 아님
비동기의 제한? 문제점? -> 비동기 작업을 시킨 쓰레드만이 비동기 작업의 결과를 확인할 수 있다 (상당히 중요한 붑ㄴ)

그래서 저번시간에 했던거는 이벤트로 쓰레드끼리 소통함, 이벤트는 운영체제가 관리하는 부분이라 모든 스레드가 받을 수 있다

쓰레드의 지역변수는 다른 쓰레드에서 사용하지 못함, 공유 자원의 문제(레이스 컨디션)에서 자유롭다
-> 그걸 쉽게 쓰게끔 만든걸 인터락 이라고 한다? C++ 11부터는 아토믹

뮤텍스, 세마포어 또 보고 이벤트로 넘어감

모달 프로세스? 음.. 모르겠고 대충 패스

대기 가능 타이머? 이것도 동기화 객체.. -> 지정된 시간이 지나면 시그널 상태가 된다
주기적으로 어떤 함수를 실행시킬 수도 있다

C++11 lock -> 윈도우API 크리티컬 섹션에 대응
조건변수(condition_variable) -> 윈도우API 이벤트에 대응
 

IOCP의 최대 장점 : 다른 쓰레드의 비동기 작업 결과를 확인할 수 있다

완료 큐에 포트번호가 저장된다 
워크 쓰레드가 여러개 돌아가면서 쓰레드 풀로 관?리될것
디스패처? -> 뭐 해주는 놈이라고 하셨는데 놓쳤다



코딩시작, 자 아무튼 이제 File뭐시기였떤걸 WSARecv WSASend로 바꿀것, 
몬가.. 몬가 거의 맨땅에서 다시 시작하는느낌인데
스탠다드 라이브러리(Tstd)도 생기고.. IOCP 클래스도 따로 만들고.. 음..
IOCP클래스 안에서 이거저거 뭐 해주고 음.. 쓰레드도 세 개 만들어주고
쓰레드를 스태틱으로 놓으면 전역변수로 사용 가능하다? 뎃.. 

카톡하느라 몬가 덩어리로 놓친느낌인데 음~ 세션 유저? 
뭐 코드보면 대충 알겠제 ㅋㅋ 

**비동기 작업의 오버랩 구조체는 작업이 완료될 때 까지 살아있어야 한다, 함수 안에서 지역변수로 쓰면 함수끝나고 죽어삐니까 안댐
-> 그래서 세션매니저 클래스 안으로 SendMsg 함수를 넣어버리고, 세션매니저 클래스에 멤버변수로 오버랩 구조체를 하나 만듬

비동기 작업은 블록 논블록 아무의미업다~

WSA_IO_PENDING -> WSA_머시기더라 암튼 기존 오류에 대응하는거

Recv던 Send던 끝나면 소켓에 바인딩한 포트번호가 리턴됨, 근데 그럼 Recv인지 Send인지 어케알아?
-> 오버랩 구조체 가지고 판단하는게 제일 대중적 
그래서 오버랩 구조체를 새로... 만들었어? OVERLAPPED2? 음?
오버랩2를 오버랩으로 형변환해서 보내고, 받은 오버랩을 오버랩2로 형변환해서 해석..;;;

클라이언트 소켓을 키로 다는게 일반적 


잤어.. 


몬가 중요한거 놓친것같은데; 버퍼 개념? 패킷?
패킷이 여러개가 확 들어올 수도 잇다? 다 안들어오고 짤릴 수도 있고.. 
*쪼개져서 연속적으로 들어온다

패킷을 리스트에다가 넣어놓고 패킷풀? 암튼 막 글케하는게 필요로 하다
근데 지금은 일단 간단한 방법으로? 1차원 버퍼?

완성된 패킷이 유저 안에 들어있음.. 

디스패치 리드 <- 암튼 이 함수 얘기임
암튼 1차원 버퍼에 send 오는대로 꾸겨넣음, 채우고 채우고 채우고
그다음에 크기로 뭐 패킷으로 짤라서 저장하는듯
-> 단점 : 복사를 계속 한다, 서버는 복사를 최대한 줄여줘야 하는게 맞다 


근데 저거 서순 꼬였거나 스까서 들어오는 경우는 얶떢함? 아직 고려하지 않는 부부분이겠지?


암튼 이걸 일단 알아야하고, 오버랩 구조체에 대해서 아는 것도 상당히 중요한데 일단 이건 다음시간에


------
음... 아직 몬가 미완성인것 같고.. 흐름은 대충 알 것 같으니.. 
따라치는건존나귀찮고 복붙도 귀찮고.. 됐다 치아라 나중에 완성되면 뭘 하든 해야겠다